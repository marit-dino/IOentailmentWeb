package parser;

import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import util.DagLeafNode;
import util.DagNode;
import util.DagValueNode;
import util.Type;

/**
 * Implements the visitor method for the nodes generated by the parser.
 */
public class NodeVisitor implements PairParserVisitor {
    private static final Logger logger = LogManager.getLogger();

    private List<DagNode> visitedNodes;

    public NodeVisitor(){
        this.visitedNodes = new ArrayList<>();
    }

    /**
     * Calls a method constructing a dag from the node from the parse tree.
     *
     * @param node from parser which is to be converted into a dag
     * @param data irrelevant, normally set to null
     * @return root of dag
     */
    @Override
    public Object visit(SimpleNode node, Object data) {
        logger.trace("visit({}, {})", node, data);
        return createDag(node);
    }

    /**
     * Converts the parse tree into a dag.
     *
     * @param simpleNode node to be converted into a dag node
     * @return a dag node
     */
    private DagNode createDag(SimpleNode simpleNode) {
        logger.trace("createDag({})", simpleNode);

        DagNode node =  new DagNode();
        if(simpleNode.jjtGetNumChildren() > 0){
            node.setType((Type) simpleNode.jjtGetValue());
            for (int i = 0; i < simpleNode.jjtGetNumChildren(); i++) {
                DagNode child = (createDag((SimpleNode) simpleNode.jjtGetChild(i)));
                if(this.visitedNodes.contains(child)) {
                    int identIndex = this.visitedNodes.indexOf(child);
                    child = this.visitedNodes.get(identIndex);
                }
                else {
                    this.visitedNodes.add(child);
                }
                node.addChild(child);
            }
        }
        else{
            if(simpleNode.jjtGetValue().equals(Type.FALSE) || simpleNode.jjtGetValue().equals(Type.TRUE)) {
                node = new DagValueNode((Type) simpleNode.jjtGetValue());
            }
            else {
                node = new DagLeafNode(simpleNode.jjtGetValue().toString());
            }
        }
        return node;
    }

    
}
